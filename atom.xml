<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Srikanth]]></title>
  <link href="http://sri-sankl.github.io/atom.xml" rel="self"/>
  <link href="http://sri-sankl.github.io/"/>
  <updated>2016-06-21T23:56:19+05:30</updated>
  <id>http://sri-sankl.github.io/</id>
  <author>
    <name><![CDATA[sri-sankl]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Role of Lambdas in Collections - Java 8]]></title>
    <link href="http://sri-sankl.github.io/blog/2016/06/17/role_of_lambdas_in_collections-java-8/"/>
    <updated>2016-06-17T21:39:06+05:30</updated>
    <id>http://sri-sankl.github.io/blog/2016/06/17/role_of_lambdas_in_collections-java-8</id>
    <content type="html"><![CDATA[<p>  Collections would have look different if lambdas were part of java from beginning. Lambdas are popular in functional programming and some other object oriented programming languages like Ruby.
<br>
It might be better to implement a new collection framework <code>collection II</code> using lambdas, but it would be a big task. Instead, java came up with a strategy of adding extension methods to existing interfaces(such as <code>Collection</code>, <code>List</code> or <code>Iterable</code>) and adding new interfaces(such as <code>Sream</code>) that are retrofitted onto existing classes.
<br>
  Major advantages of using lambdas in collections are
<br>
1. <em>Parallelism</em>
2. <em>Lazy evaluation</em></p>

<!--more-->


<p>
For example, An Employee class will looks like.
<br>
<img src="http://sri-sankl.github.io/images/EmpClass.png" alt="Employee.java" /></p>

<h5>External vs Internal Iteration</h5>

<p>If I want to set all the employees <code>dept</code> to <em>PROD</em>. I need to write a <code>for</code> loop to iterate over all the elements in the collection.</p>

<figure class='code'><figcaption><span>External Iteration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'> <span class="k">for</span> <span class="o">(</span><span class="n">Employee</span> <span class="n">employee</span> <span class="o">:</span> <span class="n">employees</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">employee</span><span class="o">.</span><span class="na">setDept</span><span class="o">(</span><span class="s">&quot;PROD&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> The Collection framework provides a way to its client to iterate over the elements through <code>iterator()</code>. The <code>for</code> loop uses the iterator and traverse sequentially through all the elements of the collection.
<br>
The disadvantages using this approch are
<br>
  1. It is inherently serial. It travels in order of which they are inserted into collection.
<br>
  2. There is no opportunity to mange the control flow, parellelism, short circuting or laziness to improve the performance.</p>

<p> The alternative to this approach is an <em>internal iteration</em>.</p>

<figure class='code'><figcaption><span>Internal Iteration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">employees</span><span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">emp</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">emp</span><span class="o">.</span><span class="na">setDept</span><span class="o">(</span><span class="s">&quot;PROD&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p> Here control flow is in the hands of library. Collections provides a way to the client to interact with its internal methods. The client deligates the snippets of code to the library to excecute. So library can decide parellel processing or lazy evalution based on the given criteria. So the internal iteration helps library to process elements in the collection parelelly. The <code>forEach()</code> method may not use the parellel processing, but there is a possibility to implement parellelism by using internal iteration.
  Internal iteration also provides a way to <em>pipeline</em> operations togather.</p>

<p>For example, If I want to shift all the <em>PRDO</em> dept employees to <em>R&amp;D</em>, we could say</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'> <span class="n">employees</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">emp</span> <span class="o">-&gt;</span> <span class="n">emp</span><span class="o">.</span><span class="na">getDept</span><span class="o">()</span> <span class="o">==</span> <span class="s">&quot;PROD&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">emp</span> <span class="o">-&gt;</span> <span class="n">emp</span><span class="o">.</span><span class="na">setDept</span><span class="o">(</span><span class="s">&quot;R&amp;D&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>filter()</code> returns a stream of employees who are matching with the given condition to <code>forEach()</code> function.
<br>
If I want to find, how much the company is spending on sales dept, then we could do
<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'> <span class="n">employees</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">emp</span> <span class="o">-&gt;</span> <span class="n">emp</span><span class="o">.</span><span class="na">getDept</span><span class="o">()</span> <span class="o">==</span> <span class="s">&quot;SALES&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">mapToLong</span><span class="o">(</span><span class="n">emp</span> <span class="o">-&gt;</span> <span class="n">emp</span><span class="o">.</span><span class="na">getSal</span><span class="o">())</span>
</span><span class='line'>      <span class="o">.</span><span class="na">sum</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Eager vs Lazy Evaluation</h5>

<p> In an eager type of evaluation, when <code>filter()</code> method gets excecuted it draws all the elements from the collection and applies the condition(Predicate) and provides a new Collection. The new collection will be used by <code>mapToLong()</code> method. In the same way <code>mapToLong()</code> method also returns a new collection. So every statement when it returns accumulates the result.</p>

<p> Where as in Lazy , filtering is only done when we start iterating the elements of results of the filter method. The <code>filter()</code> method instead of reading all the elements to return the result, it draws the first element from the source and applies the predicate. The succeded element will be deligated to the next method <code>mapToLong()</code> which is also a lazy operation. Methods such as <code>filter()</code>, <code>map()</code> are <em>naturally lazy</em>. So the return type of these methods cannot be a Collection, they return again a <code>stream</code>. The tail methods such as <code>sum()</code>  or <code>forEach()</code> are eager operations. They read all elements deligated from lazy methods and returns the result. Normally tail methods are <em>naturally eager</em>.</p>

<p> We can acheive a significant increase in performance by doing series of lazy operations and an eager operation such as <code>filter-map-forEach</code>(<em>lazy-lazy-eager</em>) or <code>filter-filter-mapToLong-sum</code>(<em>lazy-lazy-lazy-eager</em>).</p>

<p> For example, If we are doing filtering, maping and accumulating on a collection. The lazy operations such <code>filter()</code>, <code>map()</code>, <code>sum()</code> will do in single pass of data instead of three passes.</p>

<h5>Streams</h5>

<p>  The <code>Stream</code> interface is fundamental interface that intended to use in variety of senarios, including the Collections API.
<br>
Streams differs from Collections in several ways:</p>

<ol>
<li><em>No Storage:</em> Streams dont store any data. It transforms data from source through various operations. Stream method produces a new stream these are known as <em>Intermediate Operaions</em>; those that do not are <em>terminal operations</em>
<br></li>
<li><em>Functional in nature:</em> In functional programming languages functions are the first class citizens and they only returns result instead of modifying the state of params. In the same way stream operations produces results but they will not modify the data.
<br></li>
<li><em>Laziness-seeking :</em> Many stream operation such as <code>filter()</code>, <code>map()</code> are lazy in nature. We can only traverse as many elements as we need to find the answer. For example &ldquo;find the first employee who is having Rs. 10000  salary&rdquo; not need to look up all the elements in the collection.
<br></li>
<li><em>Bounds optional:</em> We can draw limited no of elements from the infinite collection of data source. For example, we can only take 20 elements from the infinite array of numbers.</li>
</ol>


<p>All the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html">stream</a> operations are not fitted in the Collections. Instead <code>stream()</code> method is added in Collections which return the <code>Stream</code> interface.
<br>
Stream operations can operate in either seqrial or parellel; whether stream is serial or parellel is a property of a stream source. We have <code>parallelStream()</code> method to return the parellel stream.</p>

<h5>Laziness and short-circuiting</h5>

<p>  If we are looking for the first employee in a dept whose salary is more than Rs.10000.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Employee</span><span class="o">&gt;</span> <span class="n">firstEmp</span> <span class="o">=</span> <span class="n">employees</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">emp</span> <span class="o">-&gt;</span> <span class="n">emp</span><span class="o">.</span><span class="na">getDept</span><span class="o">()</span> <span class="o">==</span> <span class="s">&quot;SALES&quot;</span><span class="o">)</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">emp</span> <span class="o">-&gt;</span> <span class="n">emp</span><span class="o">.</span><span class="na">getSal</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mi">10000</span><span class="o">).</span><span class="na">findFirst</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>  Instead of iterating all the elements in the collection or source, <code>filter()</code> operation finds one for which predicate is true. The <code>findfirst()</code> methods returns <code>Optional</code>, because there may be cases where no element matching the criteria.</p>

<h5>Sorting became simpler</h5>

<p>   In the previous <a href="http://sri-sankl.github.io/blog/2016/06/17/advantages-of-lambdas-in-java-8/">post</a> we have seen how to simplify sorting using comparator with lambdas</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Employee</span><span class="o">&gt;</span> <span class="n">compareByName</span> <span class="o">=</span> <span class="o">(</span><span class="n">lhs</span><span class="o">,</span> <span class="n">rhs</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">lhs</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">compareTo</span><span class="o">(</span><span class="n">rhs</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java8 provides even simpler machanism to do this</p>

<p> If I have two X type objects to comapare based on a value returned by the functions of each X. On the <code>Comparator</code> class a <code>comparing</code> function is lambda it takes a function and then extracts a value out of the object and returns a <code>Comparator</code> that sorts based on that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Employee</span><span class="o">&gt;</span> <span class="n">BY_NAME</span> <span class="o">=</span> <span class="n">Comparator</span><span class="o">.</span><span class="na">comparing</span><span class="o">(</span><span class="nl">Employee:</span><span class="o">:</span><span class="n">getName</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p> If I have to sort the employees by dept and then by salary. Java8 provides the method composition which is known as <em>functional composition</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">employees</span><span class="o">,</span> <span class="n">Employee</span><span class="o">.</span><span class="na">BY_DEPT</span><span class="o">.</span><span class="na">thenComparing</span><span class="o">(</span><span class="n">Employee</span><span class="o">.</span><span class="na">BY_SAL</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p> We can combine the <code>Comparator</code> instances in varios ways.
We can also write the above statment without assigning lambdas to <code>BY_DEPT</code> or <code>BY_SAL</code> variables as.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">employees</span><span class="o">,</span> <span class="n">Comparator</span><span class="o">.</span><span class="na">comparing</span><span class="o">(</span><span class="nl">Employee:</span><span class="o">:</span><span class="n">getDept</span><span class="o">).</span><span class="na">thenComparing</span><span class="o">(</span><span class="nl">Employee:</span><span class="o">:</span><span class="n">getSal</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h6>References:</h6>

<ol>
<li><a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-libraries-final.html">http://cr.openjdk.java.net/~briangoetz/lambda/lambda-libraries-final.html</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/java/architect-lambdas-part2-2081439.html">http://www.oracle.com/technetwork/articles/java/architect-lambdas-part2-2081439.html</a></li>
</ol>


<blockquote><p>Thank you for reading the post. Feel free to comment.
Happy Coding..:)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metaprogramming in Ruby: Implementing Class Extension Mixins]]></title>
    <link href="http://sri-sankl.github.io/blog/2016/01/26/metaprogramming-in-ruby-implementing-class-extension-mixins/"/>
    <updated>2016-01-26T19:38:53+05:30</updated>
    <id>http://sri-sankl.github.io/blog/2016/01/26/metaprogramming-in-ruby-implementing-class-extension-mixins</id>
    <content type="html"><![CDATA[<blockquote><p>Metaprogramming: Code that writes code</p></blockquote>

<h5>Problem statement:</h5>

<p>  In Indian payroll system, many compements are based on the <code>basic</code>. These components varies from company to company. Below <code>payslip_breakups</code> table shows the different components and their value from <code>basic</code> in percentages.</p>

<table>
<thead>
<tr>
<th> component_code              </th>
<th style="text-align:center;">  criteria     </th>
</tr>
</thead>
<tbody>
<tr>
<td>    hra                      </td>
<td style="text-align:center;">     50        </td>
</tr>
<tr>
<td> city_compensatory_allowance </td>
<td style="text-align:center;">     10        </td>
</tr>
<tr>
<td> employer_pf_contribution    </td>
<td style="text-align:center;">     12        </td>
</tr>
<tr>
<td> bonus_payment               </td>
<td style="text-align:center;">     15        </td>
</tr>
</tbody>
</table>


<p> These components are dynamic and has to be evaluated at run time.</p>

<!--more-->


<p></p>

<h5>Hook Methods:</h5>

<p> Whenever we write code in the object oriented programming, we will face several situations such as inheriting classes, mixing modules into classes and defining, undefining and removing methods. Metaprogramming helps us to define some methods to handle these events and do some workaround when these events fired. These methods are known as the <strong>Hook Methods</strong>.</p>

<figure class='code'><figcaption><span>payslip_breakup_mixin.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">PayslipBreakupMixin</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;PayslipBreakupMixin was mixed into </span><span class="si">#{</span><span class="n">base</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>payslip.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Payslip</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">PayslipBreakupMixin</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p> <code>included()</code> is the hook method which will be invoked when the module is included in other class and it will accept the including class as it&rsquo;s parameter. We can override this method and implement our own logic.
<br/>
Eg: <code>extend_object()</code>, <code>method_added()</code>, <code>method_removed()</code>, <code>method_undefined</code> are some hook methods</p>

<h5>Implementing hook method and using class macros</h5>

<figure class='code'><figcaption><span>payslip_breakup_mixin.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">PayslipBreakupMixin</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:basic</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">ClassMethods</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">attr_on_basic</span><span class="p">(</span><span class="o">*</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">param</span><span class="o">|</span>
</span><span class='line'>        <span class="n">define_method</span> <span class="n">param</span><span class="o">.</span><span class="n">to_sym</span> <span class="k">do</span>
</span><span class='line'>          <span class="p">((</span><span class="n">component_criterias</span><span class="o">[</span><span class="n">param</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]/</span><span class="mi">100</span><span class="p">)</span><span class="o">*</span><span class="n">basic</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">component_criterias</span>
</span><span class='line'>      <span class="vi">@component_criterias</span> <span class="o">||=</span> <span class="no">PayslipBreakUp</span><span class="o">.</span><span class="n">belongs_to_salary</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">break_up</span><span class="o">|</span> <span class="o">[</span><span class="n">break_up</span><span class="o">.</span><span class="n">component_code</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="n">break_up</span><span class="o">.</span><span class="n">criteria</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">to_h</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p> In the above mixin, <code>included()</code> method will be called by Ruby, when an inclusor(which included this module into it) includes the mixin. The <code>extend()</code> method will add the <code>ClassMethods</code> module&rsquo;s methods into the inclusor&rsquo;s Eigen class.
<br>
Eigen class is known as Object&rsquo;s own class. Every object has its own class and class itself is an object of the class <code>Class</code>.</p>

<h6>ClassMethods Explained</h6>

<ol>
<li><code>attr_on_basic()</code> method accepts parameteters to which we need to calculate the value based on basic.</li>
<li><code>define_method()</code> creates a dynamic method for each parameter.</li>
<li><code>component_criterias()</code> fetches all the breakup component criterias and creates a map.</li>
<li><code>basic</code> should be an instance valriable in the included class and it can be red by it&rsquo;s accessor.</li>
</ol>


<figure class='code'><figcaption><span>payslip.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Payslip</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">PayslipBreakupMixin</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we include the <code>PayslipBreakupMixin</code> into the payslip class. These events will be triggered:</p>

<ol>
<li>Ruby calls a Hook Method: the <code>included()</code> method</li>
<li>The hook turns back to the including class (which is sometimes called the inclusor, or the base in this case) and extends it with the ClassMethods module.</li>
<li>The <code>extend()</code> method includes the methods from ClassMethods in the inclusor&rsquo;s eigenclass.</li>
</ol>


<h5>Class Macros</h5>

<figure class='code'><figcaption><span>payslip.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Payslip</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:basic</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">PayslipBreakupMixin</span>
</span><span class='line'>  <span class="n">attr_on_basic</span> <span class="ss">:hra</span><span class="p">,</span> <span class="ss">:city_compensatory_allowance</span><span class="p">,</span> <span class="ss">:employer_pf_contribution</span><span class="p">,</span> <span class="ss">:bonus_payment</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">basic</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@basic</span> <span class="o">=</span> <span class="n">basic</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <strong>Class macros</strong> are the class level methods which creates some dynamic code for the given attributes</p>

<ol>
<li><code>attr_on_basic()</code> is a class macro and it takes some arguments and defines the given methods in it&rsquo;s respected eagen class.</li>
<li><code>attr_accessor()</code>, <code>attr_reader()</code>, <code>attr_writer()</code> etc.. are the class macros provided by ruby.</li>
</ol>


<p> <code>attr_on_basic()</code> method defines a method for each <code>:hra</code>, <code>:city_compensatory_allowance</code>, <code>:employer_pf_contribution</code>, <code>:bonus_payment</code> component. These component definations will fetch their respected value percentages from  <code>payslip_breakups</code> model and it will calculate it&rsquo;s absolute value by using <code>basic</code> and will return the final result.</p>

<blockquote><p>Thank you for reading this post. Feel free to comment.
Happy Coding..:)</p></blockquote>

<h6>References:</h6>

<ol>
<li>Metaprogramming Ruby-Paolo Perrotta</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax Pagination With Angularjs and Rails Using Will_paginate]]></title>
    <link href="http://sri-sankl.github.io/blog/2014/11/29/ajax-pagination-with-angularjs-and-rails-using-will-paginate/"/>
    <updated>2014-11-29T12:59:40+05:30</updated>
    <id>http://sri-sankl.github.io/blog/2014/11/29/ajax-pagination-with-angularjs-and-rails-using-will-paginate</id>
    <content type="html"><![CDATA[<p>I use pagination when I need to list a large number of records. In rails, we use <a href="https://github.com/mislav/will_paginate">Will Paginate</a> gem for accomplishing pagination. While dealing with pagination in a single page application(SPA)s, <code>will_paginate</code> along with the angularjs makes the implementations simpler and faster. AngularJS provides a powerful component called <a href="https://docs.angularjs.org/guide/directive">Directives</a> which can be used for implementation of reusable pagination component.<br>
  <p>In this post we will implement a dynamic, reusable pagination component, which is implemented using will_paginate and angular_directives.</p></p>

<h5>Preview:</h5>

<p>   Let us consider a Books listing page. There are a total of 14 books and the screen displays 3 books per page.</p>

<p><img src="http://sri-sankl.github.io/images/books_1.png" alt="pagination" />
<img src="http://sri-sankl.github.io/images/books_2.png" alt="pagination" />
<img src="http://sri-sankl.github.io/images/books_3.png" alt="pagination" />
</p>
   The circled component is the pagination directive which we are going to implement.</p>

<!--more-->


<p></p>

<h5>Gems used:</h5>

<figure class='code'><figcaption><span>Gemfile  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;haml-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.5.3&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;angularjs-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.2.22&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;angular-rails-templates&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;will_paginate&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.0.7&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;font-awesome-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.2.0.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><code>will_paginate</code> is the rails gem for pagiantion</li>
<li><code>font-awesome-rails</code> is rails gem which wraps the beutiful <a href="http://fortawesome.github.io/Font-Awesome">Font Awesome</a> icons library.</li>
<li>Rest of the gems are discussed in the previous <a href="http://sri-sankl.github.io/blog/2014/11/05/connecting-angularjs-resource-with-rails/">post</a>
</p>
Now do <code>bundle install</code><br></li>
</ol>


<h4>Implementation:</h4>

<p> Get the json list of books along with the pagination properties.</p>

<figure class='code'><figcaption><span>app/controllers/books_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">page</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">].</span><span class="n">present?</span> <span class="p">?</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>        <span class="vi">@books</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="p">,</span> <span class="ss">:per_page</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="no">Paginator</span><span class="o">.</span><span class="n">pagination_attributes</span><span class="p">(</span><span class="vi">@books</span><span class="p">)</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="ss">:books</span> <span class="o">=&gt;</span> <span class="vi">@books</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><code>paginate()</code> method injects pagination properties into the result.</li>
<li><code>paginate()</code> method accepts pagination options. <code>page</code> is the required attribute and others are optional.</li>
<li>We define a <code>Paginator</code> class whose responsibility is to collect pagination attributes from the given object and returns a hash that contains <em>current_page, start_index, to_index and total_pages</em>.</li>
</ol>


<figure class='code'><figcaption><span>lib/paginator.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Paginator</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">pagination_attributes</span><span class="p">(</span><span class="n">source_obj</span><span class="p">,</span> <span class="n">data_hash</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="n">data_hash</span><span class="o">[</span><span class="ss">:total_entries</span><span class="o">]</span> <span class="o">=</span> <span class="n">source_obj</span><span class="o">.</span><span class="n">total_entries</span>
</span><span class='line'>      <span class="n">previous_page</span> <span class="o">=</span> <span class="n">source_obj</span><span class="o">.</span><span class="n">previous_page</span><span class="o">.</span><span class="n">present?</span> <span class="p">?</span> <span class="n">source_obj</span><span class="o">.</span><span class="n">previous_page</span> <span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">data_hash</span><span class="o">[</span><span class="ss">:current_page</span><span class="o">]</span> <span class="o">=</span> <span class="n">previous_page</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>      <span class="n">data_hash</span><span class="o">[</span><span class="ss">:to_index</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">data_hash</span><span class="o">[</span><span class="ss">:current_page</span><span class="o">]</span> <span class="o">*</span> <span class="n">source_obj</span><span class="o">.</span><span class="n">per_page</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">source_</span> <span class="n">obj</span><span class="o">.</span><span class="n">total_entries</span> <span class="p">?</span> <span class="n">source_obj</span><span class="o">.</span><span class="n">total_entries</span> <span class="p">:</span> <span class="p">(</span><span class="n">data_hash</span><span class="o">[</span><span class="ss">:current_page</span><span class="o">]</span> <span class="o">*</span> <span class="n">source_obj</span><span class="o">.</span><span class="n">per_page</span><span class="p">)</span>
</span><span class='line'>      <span class="n">data_hash</span><span class="o">[</span><span class="ss">:from_index</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">previous_page</span> <span class="o">*</span> <span class="n">source_obj</span><span class="o">.</span><span class="n">per_page</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>      <span class="n">data_hash</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><b> <em>Note:</em> </b>Since paginator.rb is located in <code>/lib</code> directory, we have to load this directory</p>

<figure class='code'><figcaption><span>`config/application.rb` </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">+=</span> <span class="sx">%W(</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="sx">/lib/)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h5>Bootstrap Angular Application</h5>

<figure class='code'><figcaption><span>app/assets/javascripts/ng_initialize.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myApp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;myApp&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ngResource&#39;</span><span class="p">,</span> <span class="s1">&#39;myTemplates&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>  Configuring angularjs and its dependent modules are discussed in <a href="http://sri-sankl.github.io/blog/2014/11/05/connecting-angularjs-resource-with-rails/">connecting angularjs with rails</a>
<br/>
Write an angular Book service which fetches the list of books</p>

<figure class='code'><figcaption><span>app/assets/services/book.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s2">&quot;bookService&quot;</span><span class="p">,[</span><span class="s2">&quot;$http&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">books</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">page</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/books.json&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">params</span><span class="o">:</span> <span class="p">{</span><span class="nx">page</span><span class="o">:</span> <span class="nx">page</span> <span class="p">}})</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">books</span> <span class="o">:</span> <span class="nx">books</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Define Angular Controller</h5>

<figure class='code'><figcaption><span>app/controllers/books_controller.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;BooksController&quot;</span><span class="p">,[</span><span class="s2">&quot;bookService&quot;</span><span class="p">,</span> <span class="s2">&quot;$scope&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">bookService</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">getBooks</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">page</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">bookService</span><span class="p">.</span><span class="nx">books</span><span class="p">(</span><span class="nx">page</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>                    <span class="nx">$scope</span><span class="p">.</span><span class="nx">books</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">books</span>
</span><span class='line'>                    <span class="nx">$scope</span><span class="p">.</span><span class="nx">from_index</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">from_index</span>
</span><span class='line'>                    <span class="nx">$scope</span><span class="p">.</span><span class="nx">to_index</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">to_index</span>
</span><span class='line'>                    <span class="nx">$scope</span><span class="p">.</span><span class="nx">total_entries</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">total_entries</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">$scope</span><span class="p">.</span><span class="nx">current_page</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">current_page</span><span class="p">)</span>
</span><span class='line'>                <span class="p">})</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}])</span>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Inject book service into the controller</li>
<li><code>getBooks</code> method queries the <code>bookService</code> with the required <code>page</code> number.</li>
<li><code>books</code> data as well as the pagination attributes are made available in the scope of <code>BooksController</code></li>
<li><code>from_index</code>, <code>to_index</code>, <code>total_entries</code>, <code>current_page</code> are made to available in its scope</li>
</ol>


<h4>Define a reusable directive</h4>

<h5>Directive Usage</h5>

<figure class='code'><figcaption><span>app/views/books/index.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nc">.col-md-4</span><span class="p">{</span><span class="ss">:ng_controller</span> <span class="o">=&gt;</span> <span class="s2">&quot;BooksController&quot;</span><span class="p">,</span> <span class="ss">:ng_init</span> <span class="o">=&gt;</span> <span class="s2">&quot;getBooks(1)&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nt">%my-pagination</span><span class="p">{</span><span class="ss">:from</span> <span class="o">=&gt;</span> <span class="s2">&quot;from_index&quot;</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;to_index&quot;</span><span class="p">,</span> <span class="ss">:current_page</span> <span class="o">=&gt;</span> <span class="s2">&quot;current_page&quot;</span><span class="p">,</span> <span class="ss">:total</span><span class="o">=&gt;</span> <span class="s2">&quot;total_entries&quot;</span><span class="p">,</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">&quot;getBooks(page)&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>The custom element <code>my-pagination</code> is a directive and it has the attributes <em>from, to, current_page, total</em>.</li>
<li><code>from</code> is assigned with <code>from_index</code>, a scoped variable which is under <code>Bookscontroller</code>.</li>
<li><code>to</code> is assigned with <code>to_index</code>.</li>
<li><code>current_page</code> is assigned with <code>current_page</code>.</li>
<li><code>total</code> is assigned with <code>total_entries</code>.</li>
<li><code>ation</code> is reffered to the <code>getBooks()</code> method, which is defined in <code>Bookscontroller</code>.</li>
</ol>


<h5>Directive Defination</h5>

<figure class='code'><figcaption><span>app/assets/javascripts/directives/pagination.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s2">&quot;myPagination&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">from</span><span class="o">:</span> <span class="s1">&#39;=&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">to</span><span class="o">:</span> <span class="s1">&#39;=&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">total</span><span class="o">:</span> <span class="s1">&#39;=&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">currentPage</span><span class="o">:</span> <span class="s1">&#39;=&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">action</span><span class="o">:</span> <span class="s1">&#39;&amp;&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">controller</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;$scope&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">previousPage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentPage</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">action</span><span class="p">({</span><span class="nx">page</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentPage</span><span class="p">})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">nextPage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentPage</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">action</span><span class="p">({</span><span class="nx">page</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentPage</span><span class="p">})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">}],</span>
</span><span class='line'>      <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;paginationElements.html&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>The element <code>my_pagination</code> maps to <code>myPagination</code> directive. This mapping has been done by angular <a href="https://docs.angularjs.org/guide/directive">normalization</a></li>
<li>Our directive is restricted to element by defining <code>restrict</code> with <code>E</code>.</li>
<li><b><em>Scope</em></b> creates an <em>Isolate Scope</em> to this directive so that we can reuse it any where.

<ol>
<li><code>from: '='</code> is similar to <code>from : = from</code>. It states that <code>from</code> property of directive scope is bind with the value assigned to the <code>from</code> attribute of <code>my_pagination</code> element.</li>
<li><code>action: '&amp;'</code> is similar to <code>action: &amp;action</code>. <code>&amp;</code> binding is used evalute the expression or function defined on <code>action</code> attribute of <code>my_pagination</code> element.</li>
</ol>
</li>
<li><p><b><em>Controller</em></b>: Isolated Scoped attributes can access and manipulated by its own controller.</p>

<ol>
<li><code>previousPage()</code> method is to show the previous page. It decreases <code>currentPage</code> by 1 and invokes the <code>action</code> attributes value. <code>{page: $scope.currentPage}</code> is passed as the page parameter to the <code>getBooks(page)</code> function.</li>
<li><code>nextPage()</code> method is to show the previous page. It increases <code>currentPage</code> by 1 and invokes the <code>action</code> attributes value.</li>
</ol>
</li>
<li><p><b><em>TemplateUrl</em></b>: It is path to the html content.
Here is the code</p></li>
</ol>


<figure class='code'><figcaption><span>app/assets/templates/paginationElements.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%span</span>
</span><span class='line'>  {{from}} - {{to}} of {{total}}
</span><span class='line'><span class="nc">.btn-group.btn-group-sm</span>
</span><span class='line'>  <span class="nt">%button</span><span class="nc">.btn.btn-default</span><span class="p">{</span><span class="ss">:ng_click</span> <span class="o">=&gt;</span> <span class="s2">&quot;previousPage()&quot;</span><span class="p">,</span> <span class="ss">:ng_class</span> <span class="o">=&gt;</span> <span class="s2">&quot;{&#39;disabled&#39;: from == 1}</span>&quot;}
</span><span class='line'>    <span class="nt">%i</span><span class="nc">.fa.fa-chevron-left.fa-lg</span>
</span><span class='line'>  <span class="nt">%button</span><span class="nc">.btn.btn-default</span><span class="p">{</span><span class="ss">:ng_click</span> <span class="o">=&gt;</span> <span class="s2">&quot;nextPage()&quot;</span><span class="p">,</span> <span class="ss">:ng_class</span> <span class="o">=&gt;</span> <span class="s2">&quot;{&#39;disabled&#39;: to == total}</span>&quot;}
</span><span class='line'>    <span class="nt">%i</span><span class="nc">.fa.fa-chevron-right.fa-lg</span>
</span></code></pre></td></tr></table></div></figure>


<h5>The final index view is</h5>

<figure class='code'><figcaption><span>app/views/books/index.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nc">.col-md-4</span><span class="p">{</span><span class="ss">:ng_controller</span> <span class="o">=&gt;</span> <span class="s2">&quot;BooksController&quot;</span><span class="p">,</span> <span class="ss">:ng_init</span> <span class="o">=&gt;</span> <span class="s2">&quot;getBooks(1)&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nt">%h3</span>
</span><span class='line'>    Books
</span><span class='line'>    <span class="nc">.pull-right</span>
</span><span class='line'>      <span class="nt">%my-pagination</span><span class="p">{</span><span class="ss">:from</span> <span class="o">=&gt;</span> <span class="s2">&quot;from_index&quot;</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;to_index&quot;</span><span class="p">,</span> <span class="ss">:current_page</span> <span class="o">=&gt;</span> <span class="s2">&quot;current_page&quot;</span><span class="p">,</span> <span class="ss">:total</span><span class="o">=&gt;</span> <span class="s2">&quot;total_entries&quot;</span><span class="p">,</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">&quot;getBooks(page)&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nt">%table</span><span class="nc">.table.table-condensed.table-bordered</span>
</span><span class='line'>    <span class="nt">%thead</span>
</span><span class='line'>      <span class="nt">%th</span> S.No
</span><span class='line'>      <span class="nt">%th</span> ISBN
</span><span class='line'>      <span class="nt">%th</span> Name
</span><span class='line'>    <span class="nt">%tbody</span>
</span><span class='line'>      <span class="nt">%tr</span><span class="p">{</span><span class="ss">:ng_repeat</span> <span class="o">=&gt;</span> <span class="s2">&quot;book in books&quot;</span><span class="p">}</span>
</span><span class='line'>        <span class="nt">%td</span> 
</span><span class='line'>        <span class="nt">%td</span> 
</span><span class='line'>        <span class="nt">%td</span> 
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Thank you for reading the post. Feel free to comment.
Happy Coding..:)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting AngularJs Resource With Rails]]></title>
    <link href="http://sri-sankl.github.io/blog/2014/11/05/connecting-angularjs-resource-with-rails/"/>
    <updated>2014-11-05T21:59:12+05:30</updated>
    <id>http://sri-sankl.github.io/blog/2014/11/05/connecting-angularjs-resource-with-rails</id>
    <content type="html"><![CDATA[<p>RAILS <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">RESTful</a> web services have made my web application development much simpler and faster. There are several javascript frameworks which provides RESTful services. <a href="https://angularjs.org/">Angular.js</a> is one of the best and popular javasript framework among them. It provides RESTful services using its <code>ng_resouce</code> API.</p>

<h2>Implementing a sample app using Rails, <em>ng, ng_resouce and ng_routes</em>.</h2>

<h4>Gems used:</h4>

<figure class='code'><figcaption><span>Gemfile  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;haml-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.5.3&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;angularjs-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.2.22&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;angular-rails-templates&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<ol>
<li><a href="http://haml.info">Haml</a> is a markup language used to write a well-intented and a clear structured  HTML. <a href="https://github.com/indirect/haml-rails">haml-rails</a> is a templating engine which converts haml into html.</li>
<li><a href="https://rubygems.org/gems/angularjs-rails">angularjs-rails</a> is the rails gem for angular.js library.</li>
<li><a href="https://github.com/pitr/angular-rails-templates">angular-rails-templates</a> is used to load  angular templates as part of asset pipeline.

<ul>
<li>Angular engine cannot convert haml templates into html while rendering. Hence the rendered content will be shown as a text in the web page.</li>
<li><code>angular-rails-templates</code> converts the haml files into html by using the <code>haml</code> gem. These converted html files will be loaded with the assets.</li>
<li>Since templates are cached, we can avoid the ajax calls required by angular engine to render the templates.
<br>
 <em>Create a separate directory for templates
    <br/>
  <code>$ mkdir app/assets/templates</code></em></li>
<li>configure angular-rails-templates.</li>
</ul>
</li>
</ol>


<figure class='code'><figcaption><span>config/application.rb                 </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> config.angular_templates.module_name    <span class="o">=</span> <span class="s1">&#39;myTemplates&#39;</span>
</span><span class='line'> config.angular_templates.ignore_prefix  <span class="o">=</span> <span class="s1">&#39;templates/&#39;</span>
</span><span class='line'> config.angular_templates.markups        <span class="o">=</span> %w<span class="o">(</span>erb haml<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yeah..! We have done with the set up. Now lets get into action.</p>

<h4>A Book Model</h4>

<p>Let us take the example of a Book resource and use RESTful API to manipulate its state. Consider the attributes ISBN, Name and Damaged(Boolean indicating whether the book is damaged or not).
  <br/></p>

<h5>Generate ruby model and controller.</h5>

<figure class='code'><figcaption><span>Generating Ruby Model and Controller</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="n">book</span> <span class="ss">isbn</span><span class="p">:</span><span class="n">string</span> <span class="nb">name</span><span class="ss">:string</span> <span class="ss">damaged</span><span class="p">:</span><span class="n">boolean</span>
</span><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="n">books</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Configure Book at rails routes</h5>

<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:books</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Include required javasript libraries</h5>

<figure class='code'><figcaption><span>app/assets/javascripts/application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require angular</span>
</span><span class='line'><span class="c1">//= require angular-resource</span>
</span><span class='line'><span class="c1">//= require angular-route.min</span>
</span><span class='line'><span class="c1">//= require angular-rails-templates</span>
</span><span class='line'><span class="c1">//= require ng_initialize</span>
</span><span class='line'><span class="c1">//= require_tree ../templates</span>
</span><span class='line'><span class="c1">//= require_tree .</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> <code>require_tree ../templates</code> loads all the haml files inside its <code>templates</code> directory and its sub directories.</p>

<h6><em>Note: Angular.js library should be loaded before its dependent libraries are loaded.</em></h6>

<h4>Bootstraping Angular App</h4>

<p>We can bootstrap angular app in two ways. <em>Automatic initialization</em> and <em>Manual initialization</em></p>

<h5>Automatic Initialization</h5>

<figure class='code'><figcaption><span>app/view/layaouts/application.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'> <span class="nn">!!!</span>
</span><span class='line'> <span class="nt">%html</span><span class="p">{</span><span class="ss">:ng_app</span> <span class="o">=&gt;</span> <span class="s1">&#39;myApp&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><code>ng_app</code> on a html element bootstraps angular engine automatically.</li>
<li>All the siblings of <code>html</code> tag will be under the scope of <code>ng_app</code>.</li>
<li>When the angular.js library is loaded, it will search for the <code>:ng_app</code> attribute on any of the DOM element and <a href="https://docs.angularjs.org/guide/bootstrap">bootstraps</a> it.</li>
</ol>


<h5>Manual Initialization</h5>

<p>  We can get more control on angular module initilization using <a href="https://docs.angularjs.org/guide/bootstrap">manual bootstrap</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MyController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">greetMe</span> <span class="o">=</span> <span class="s1">&#39;World&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}]);</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">angular</span><span class="p">.</span><span class="nx">bootstrap</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;myApp&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p> We will go with automatic initialization in this post.</p>

<h4>Inject dependent modules into Angular application</h4>

<figure class='code'><figcaption><span>app/assets/javascripts/ng_initialize.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myApp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;myApp&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ngResource&#39;</span><span class="p">,</span> <span class="s1">&#39;ngRoute&#39;</span><span class="p">,</span> <span class="s1">&#39;myTemplates&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><code>angularjs-rails</code> gem comes with <code>ng_resource</code>. But we need to inject into it explicitly.</li>
<li><code>ngRoute</code> is used for angular routes.</li>
<li><code>myTemplates</code> is <code>module_name</code> of rails angular templates, which was configured at <em>application.rb</em>.</li>
</ol>


<h4>Define Resource</h4>

<p><em>Group <a href="https://docs.angularjs.org/guide/providers">services/factories</a> into a services directory.</em></p>

<figure class='code'><figcaption><span>app/assets/javascripts/services/book.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s2">&quot;Book&quot;</span><span class="p">,[</span><span class="s2">&quot;$resource&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$resource</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$resource</span><span class="p">(</span><span class="s1">&#39;/books/:id.json&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s1">&#39;@id&#39;</span><span class="p">})</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>  The URL of the resource has an attribute <code>id</code> prefixed with <code>:</code>. It acts as a request parameter and this value will be replaced with respective attribute of the parameter hash.</p>

<ol>
<li>If the parameter hash is <code>{id: 2}</code> then the url becomes <code>/books/2.json</code>.</li>
<li>If the parameter hash is <code>{id:2, name: 'OS'}</code> then the url becomes <code>/books/2.json?name=OS</code>. Here the extra keys in hash will be added as parameters to the url after <code>?</code></li>
<li><code>@</code> symbol on any attribute will fetch the corresponding values from its data. If a <em>book</em> object is having the state as <code>{id: 2, name: 'OS', isbn:'121-340121'}</code> and the resource is <code>$resource('/books/:id.json', {id:'@id', isbn:'@isbn'})</code>. Here {id} and {isbn} would be respctive attributes of <em>book</em>.</li>
<li>The sufix of the url is a response format(<code>.json</code>). We can also make this format dynamic by changing the resource to <code>('/books/:id.:json', {id:'@id', json: '@json'})</code>
<br>
<em>We define an anonymous <a href="http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html">module</a> and pass global variables <code>angular</code> and <code>myApp</code> to it, so that global scope can be avoided</em>

<h6><em>Note: Make sure that initilization of <code>myApp</code> has been done before loading this service.</em></h6>

<p><em>$resource</em> provides the following functions and their respective request types</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span> <span class="s1">&#39;get&#39;</span><span class="o">:</span>    <span class="p">{</span><span class="nx">method</span><span class="o">:</span><span class="s1">&#39;GET&#39;</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;save&#39;</span><span class="o">:</span>   <span class="p">{</span><span class="nx">method</span><span class="o">:</span><span class="s1">&#39;POST&#39;</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;query&#39;</span><span class="o">:</span>  <span class="p">{</span><span class="nx">method</span><span class="o">:</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">isArray</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;remove&#39;</span><span class="o">:</span> <span class="p">{</span><span class="nx">method</span><span class="o">:</span><span class="s1">&#39;DELETE&#39;</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;delete&#39;</span><span class="o">:</span> <span class="p">{</span><span class="nx">method</span><span class="o">:</span><span class="s1">&#39;DELETE&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><code>Book.get({id: 1})</code> method makes a <code>GET /books/1.json</code> request.</li>
<li><code>Book.query()</code> method makes a <code>GET /books.json</code> request.</li>
<li><code>true</code> value of <code>isArray</code> indicates response data is in the form of Array.</li>
<li><code>false</code> value of <code>isArray</code> indicates response data is in the form of Hash.</li>
</ol>


<p>We can call <code>$method()</code> on any object(book.$save(), book.$delete()..etc). These <code>$method()s</code> returns the <a href="https://docs.angularjs.org/api/ng/service/$q">promises</a>.</p>

<h4>Books Listing :</h4>

<h5>Definie <code>index</code> action in <code>books_controller.rb</code>.</h5>

<figure class='code'><figcaption><span>app/controllers/books_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="no">Book</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This index action gives an array of books as json data.</p>

<h5>Define angular route to navigate to the listing page.</h5>

<figure class='code'><figcaption><span>app/assets/javascripts/router.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s2">&quot;$routeProvider&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$routeProvider</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/books&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;books/index.html&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">books</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Book</span><span class="p">){</span>
</span><span class='line'>                        <span class="k">return</span> <span class="nx">Book</span><span class="p">.</span><span class="nx">query</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="nx">controller</span><span class="o">:</span> <span class="s2">&quot;BooksIndexController&quot;</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><a href="https://docs.angularjs.org/api/ngRoute/provider/$routeProvider">$routeProvider</a> is used to create an angular routes.</li>
<li><code>when</code> adds a new route to route service</li>
<li><code>templateUrl</code> is the path to the file to be rendered after action. Angular templates engine adds <code>templates/</code> to <code>books/index.html</code> and the final file path will be <code>templates/books/index.html</code>.</li>
<li><a href="https://docs.angularjs.org/api/ngRoute/provider/$routeProvider"><code>resolve</code></a> executes before the initialization of <em>BooksIndexController</em>. The returned object can be injected into controller as a dependency.
<br/>
<code>Book.query()</code> makes a get request, resolves the promise and returns all the <code>books</code>.</li>
</ol>


<figure class='code'><figcaption><span>app/assets/javascripts/controllers/books_controller.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;BooksIndexController&quot;</span><span class="p">,[</span><span class="s2">&quot;books&quot;</span><span class="p">,</span> <span class="s2">&quot;$scope&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">books</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">books</span> <span class="o">=</span> <span class="nx">books</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>books</code> returned from resolve of route is injected into to the controller scope.</p>

<figure class='code'><figcaption><span>app/assets/templetes/books/index.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'>  <span class="nt">%a</span><span class="p">{</span><span class="ss">:href</span> <span class="o">=&gt;</span> <span class="s2">&quot;#/new&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;btn btn-primary btn-sm&quot;</span><span class="p">}</span> New Book
</span><span class='line'>
</span><span class='line'>  <span class="nt">%table</span><span class="nc">.table.table-condensed.table-bordered</span>
</span><span class='line'>    <span class="nt">%thead</span>
</span><span class='line'>      <span class="nt">%th</span> ISBN
</span><span class='line'>      <span class="nt">%th</span> Name
</span><span class='line'>      <span class="nt">%th</span> Is Damaged
</span><span class='line'>      <span class="nt">%th</span>
</span><span class='line'>    <span class="nt">%tbody</span>
</span><span class='line'>      <span class="nt">%tr</span><span class="p">{</span><span class="ss">:ng_repeat</span> <span class="o">=&gt;</span> <span class="s2">&quot;book in books&quot;</span><span class="p">}</span>
</span><span class='line'>        <span class="nt">%td</span> {{book.isbn}}
</span><span class='line'>        <span class="nt">%td</span> {{book.name}}
</span><span class='line'>        <span class="nt">%td</span> {{book.damaged}}
</span><span class='line'>        <span class="nt">%td</span>
</span><span class='line'>          <span class="nt">%a</span><span class="p">{</span><span class="ss">:href</span> <span class="o">=&gt;</span> <span class="s2">&quot;#/{{book.id}</span>}/edit&quot;, :class =&gt; &quot;btn btn-warning btn-sm &quot;} Edit
</span><span class='line'>          <span class="nt">%a</span><span class="p">{</span><span class="ss">:href</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:ng_click</span> <span class="o">=&gt;</span> <span class="s2">&quot;destroy(book)&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;btn btn-danger btn-sm &quot;</span><span class="p">}</span> Delete
</span><span class='line'>          <span class="nt">%a</span><span class="p">{</span><span class="ss">:href</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:ng_click</span> <span class="o">=&gt;</span> <span class="s2">&quot;markAsDamaged(book)&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;btn btn-info btn-sm&quot;</span> <span class="p">,</span> <span class="ss">:ng_hide</span> <span class="o">=&gt;</span> <span class="s2">&quot;book.damaged&quot;</span><span class="p">}</span> Marks as damaged
</span></code></pre></td></tr></table></div></figure>


<h4>Define New Book and Save</h4>

<p>Write <code>create</code> action in <code>books_controller.rb</code></p>

<figure class='code'><figcaption><span>app/controllers/books_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">book_params</span><span class="p">)</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="n">book</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Angular router needs to be updated now</p>

<figure class='code'><figcaption><span>app/assets/javascripts/router.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s2">&quot;$routeProvider&quot;</span><span class="p">,</span> <span class="s2">&quot;$locationProvider&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">,</span> <span class="nx">$locationProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$routeProvider</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/books&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                 <span class="p">......</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/new&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;books/new.html&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">newBook</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Book</span><span class="p">){</span>
</span><span class='line'>                        <span class="k">return</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">({</span><span class="nx">isbn</span><span class="o">:</span> <span class="kc">null</span> <span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">damaged</span><span class="o">:</span> <span class="kc">false</span><span class="p">})</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="nx">controller</span><span class="o">:</span> <span class="s2">&quot;BooksNewController&quot;</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>#/new</code> route creates an empty book object and passes it to the <em>BooksNewController</em></p>

<figure class='code'><figcaption><span>app/assets/javascripts/controllers/books_controller.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">......</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;BooksNewController&quot;</span><span class="p">,[</span><span class="s2">&quot;$scope&quot;</span><span class="p">,</span> <span class="s2">&quot;$location&quot;</span><span class="p">,</span> <span class="s2">&quot;book&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">book</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">book</span> <span class="o">=</span> <span class="nx">book</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the form defining creation of a new book</p>

<figure class='code'><figcaption><span>app/assets/templetes/books/new.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%form</span><span class="p">{</span><span class="ss">:method</span> <span class="o">=&gt;</span> <span class="s2">&quot;post&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;form-horizantal&quot;</span><span class="p">,</span> <span class="ss">:ng_submit</span> <span class="o">=&gt;</span> <span class="s2">&quot;submit()&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nc">.form-groupe</span>
</span><span class='line'>    <span class="nt">%label</span><span class="nc">.control-label</span> ISBN
</span><span class='line'>    <span class="nt">%input</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="ss">:ng_model</span> <span class="o">=&gt;</span> <span class="s2">&quot;book.isbn&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nc">.form-groupe</span>
</span><span class='line'>    <span class="nt">%label</span><span class="nc">.control-label</span> Name
</span><span class='line'>    <span class="nt">%input</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="ss">:ng_model</span> <span class="o">=&gt;</span> <span class="s2">&quot;book.name&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nc">.form-groupe</span>
</span><span class='line'>    <span class="nt">%button</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;submit&quot;</span><span class="p">}</span> Save
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>new.html.haml is under the <em>BooksNewController</em>&rsquo;s scope</li>
<li>All the book attributes are bounded with <code>ng_model</code> of form inputs. When we submit the form it invokes <code>submit()</code> of <code>ng_submit</code> attribute.
Let us add submit function in <em>BooksNewController</em></li>
</ol>


<figure class='code'><figcaption><span>app/assets/javascripts/controllers/books_controller.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">......</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;BooksNewController&quot;</span><span class="p">,[</span><span class="s2">&quot;$scope&quot;</span><span class="p">,</span> <span class="s2">&quot;$location&quot;</span><span class="p">,</span> <span class="s2">&quot;book&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">book</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">book</span> <span class="o">=</span> <span class="nx">book</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">submit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">book</span><span class="p">.</span><span class="nx">$save</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;/books&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// handle failure</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>On successfull creation of book, <a href="https://docs.angularjs.org/api/ng/service/$location">$location</a> redirects to <code>/books</code> route.</p>

<h4>Edit and Update Book</h4>

<p>Let us update <code>books_controller.rb</code> to include functionality to update a book</p>

<figure class='code'><figcaption><span>app/controllers/books_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="n">book</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="n">book</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">book_params</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Define <em>update</em> action in <em>resource</em></h4>

<p>Default actions of <code>$resource</code> will not include Update action. We have to configure it.</p>

<figure class='code'><figcaption><span>app/assets/javascripts/services/book.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s2">&quot;Book&quot;</span><span class="p">,[</span><span class="s2">&quot;$resource&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$resource</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$resource</span><span class="p">(</span><span class="s1">&#39;/books/:id.json&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s1">&#39;@id&#39;</span><span class="p">},</span>
</span><span class='line'>                         <span class="p">{</span>
</span><span class='line'>                             <span class="s2">&quot;update&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">method</span><span class="o">:</span> <span class="s2">&quot;PUT&quot;</span><span class="p">}</span>
</span><span class='line'>                         <span class="p">}</span>
</span><span class='line'>                        <span class="p">);</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Update angular router for edit action</h4>

<figure class='code'><figcaption><span>app/assets/javascripts/router.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s2">&quot;$routeProvider&quot;</span><span class="p">,</span> <span class="s2">&quot;$locationProvider&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">,</span> <span class="nx">$locationProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$routeProvider</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/books&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                 <span class="p">......</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/new&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                 <span class="p">......</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/:id/edit&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;books/new.html&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">book</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Book</span><span class="p">,</span> <span class="nx">$route</span><span class="p">){</span>
</span><span class='line'>                        <span class="k">return</span> <span class="nx">Book</span><span class="p">.</span><span class="nx">get</span><span class="p">({</span><span class="nx">id</span><span class="o">:</span> <span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">})</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="nx">controller</span><span class="o">:</span> <span class="s2">&quot;BooksEditController&quot;</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Get request parameters using <a href="https://docs.angularjs.org/api/ngRoute/service/$route"><code>$route</code></a>.</li>
<li>Use <code>$route.current.params</code>  instead of <a href="https://docs.angularjs.org/api/ngRoute/service/$routeParams">$routeParams</a> to access the new current route parameters.</li>
<li><code>Book.get({id: $route.current.params.id})</code> makes the GET request with url like &ldquo;/books/1.json&rdquo;.</li>
<li>Now the <em>Book</em> state is <code>"book"=&gt;{"id"=&gt;"1", "isbn"=&gt;"81-7596-067-1", "name"=&gt;"Old Book Name", "damaged"=&gt;false}</code></li>
</ol>


<h4>Handle update in angular controller</h4>

<figure class='code'><figcaption><span>app/assets/javascripts/controllers/books_controller.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">......</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;BooksEditController&quot;</span><span class="p">,[</span><span class="s2">&quot;book&quot;</span><span class="p">,</span> <span class="s2">&quot;$scope&quot;</span><span class="p">,</span><span class="s2">&quot;$location&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">book</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">book</span> <span class="o">=</span> <span class="nx">book</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">submit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">book</span><span class="p">.</span><span class="nx">$update</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s2">&quot;/books&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// handle failure</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>The submitted form here calls the <code>$update()</code> function on book.</li>
<li>It makes the PUT <code>/books/1.json</code> and params will be <code>"book"=&gt;{"id"=&gt;"1", "isbn"=&gt;"81-7596-067-1", "name"=&gt;"New Book Name", "damaged"=&gt;false}</code></li>
</ol>


<h3>Delete Book</h3>

<p>Since all the books are rendered under the  <em>BooksIndexController</em> scope, let us define <code>destroy()</code> method in the same controller.</p>

<figure class='code'><figcaption><span>app/assets/javascripts/controllers/books_controller.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;BooksIndexController&quot;</span><span class="p">,[</span><span class="s2">&quot;books&quot;</span><span class="p">,</span> <span class="s2">&quot;$scope&quot;</span><span class="p">,</span> <span class="s2">&quot;$route&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">books</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">,</span> <span class="nx">$route</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">books</span> <span class="o">=</span> <span class="nx">books</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">destroy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">book</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">confirm</span><span class="p">(</span><span class="s2">&quot;Are You Sure?&quot;</span><span class="p">)){</span>
</span><span class='line'>                <span class="nx">book</span><span class="p">.</span><span class="nx">$delete</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>                        <span class="nx">$route</span><span class="p">.</span><span class="nx">reload</span><span class="p">();</span>
</span><span class='line'>                    <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">reason</span><span class="p">){</span>
</span><span class='line'>                       <span class="c1">// handle failure   </span>
</span><span class='line'>                    <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Call <code>$delete()</code> function on a book to destroy it. It creates DELETE <code>/books/1.json</code> request</li>
<li>If the book is deleted successfully, <code>$route.reload()</code> reloads the current page.</li>
</ol>


<h3>Custom Actions</h3>

<p>We have used CRUD action on the resource so far. We can also make custom calls on the resource</p>

<figure class='code'><figcaption><span>app/assets/javascripts/services/book.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s2">&quot;Book&quot;</span><span class="p">,[</span><span class="s2">&quot;$resource&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$resource</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$resource</span><span class="p">(</span><span class="s1">&#39;/books/:id.json&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s1">&#39;@id&#39;</span><span class="p">},</span>
</span><span class='line'>                         <span class="p">{</span>
</span><span class='line'>                             <span class="s2">&quot;update&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">method</span><span class="o">:</span> <span class="s2">&quot;PUT&quot;</span><span class="p">},</span>
</span><span class='line'>                             <span class="s2">&quot;markAsDamaged&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/books/:id/mark_as_damaged.json&quot;</span><span class="p">,</span> <span class="nx">method</span><span class="o">:</span> <span class="s2">&quot;PUT&quot;</span><span class="p">}</span>
</span><span class='line'>                             <span class="s2">&quot;damagedBooks&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/books/damaged_books.json&quot;</span><span class="p">,</span> <span class="nx">method</span><span class="o">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="nx">isArray</span><span class="o">:</span> <span class="kc">true</span><span class="p">}</span>
</span><span class='line'>                         <span class="p">}</span>
</span><span class='line'>                        <span class="p">);</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>These custom actions needs complete Url.</p>

<ol>
<li><code>markAsDamaged</code> is called on book object to changes its status to damaged. <code>book.$markAsDamaged()</code> create a <code>PUT</code> request and url as <code>/books/1/mark_as_damaged.json</code></li>
<li><code>damagedBooks</code> gets an array of damaged books. Book.damaged_books() makes a <code>GET</code> request and url as <code>books/damaged_books.json</code></li>
</ol>


<h4>Configure custom action in routes.rb</h4>

<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">resources</span> <span class="ss">:books</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">member</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">put</span> <span class="s2">&quot;mark_as_damaged&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">collection</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="s2">&quot;damaged_books&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>update books_controller.rb</p>

<figure class='code'><figcaption><span>app/controllers/books_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BooksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mark_as_damaged</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="n">book</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="ss">:damaged</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="n">book</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Define <code>markAsDamaged()</code> function in <em>BooksIndexController</em></p>

<figure class='code'><figcaption><span>app/assets/javascripts/controllers/books_controller.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;BooksIndexController&quot;</span><span class="p">,[</span><span class="s2">&quot;books&quot;</span><span class="p">,</span> <span class="s2">&quot;$scope&quot;</span><span class="p">,</span> <span class="s2">&quot;$location&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">books</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">books</span> <span class="o">=</span> <span class="nx">books</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">destroy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">book</span><span class="p">){</span>
</span><span class='line'>                 <span class="p">.......</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">markAsDamaged</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">book</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">book</span><span class="p">.</span><span class="nx">$markAsDamaged</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>                    <span class="nx">book</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span><span class='line'>                <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">reason</span><span class="p">){</span>
</span><span class='line'>                   <span class="c1">// handle error</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'><span class="p">})(</span><span class="nx">angular</span><span class="p">,</span> <span class="nx">myApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope by now you would know how to define <code>damaged_books()</code> handler in the <em>BooksIndexController</em>.
<br/></p>

<p>You can find this git hub repo at <a href="https://github.com/sri-sankl/ng_resouce_with_rails">ng_resouce_with_rails</a></p>

<blockquote><p>Thank you for reading the post. Feel free to comment.
Happy Coding..:)</p></blockquote>
]]></content>
  </entry>
  
</feed>
